openapi: 3.0.3
info:
  title: Transaction Microservice API
  version: 1.0.0
  description: API para gestionar transacciones bancarias como depósitos, retiros, pagos y cargos por crédito.

servers:
  - url: http://localhost:8080
    description: Servidor local de desarrollo

paths:
  /api/transactions:
    get:
      summary: Listar todas las transacciones
      operationId: getAllTransactions
      responses:
        '200':
          description: Lista de transacciones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionResponse'
              examples:
                sampleList:
                  summary: Lista de ejemplo
                  value:
                    - id: "txn-001"
                      productId: "prod-123"
                      type: "DEPOSIT"
                      amount: 100.0
                      date: "2025-08-14T10:00:00Z"
                      description: "Depósito inicial"

    post:
      summary: Crear una nueva transacción
      operationId: createTransaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              productId: "prod-123"
              type: "DEPOSIT"
              amount: 150.75
              date: "2025-08-14T12:00:00Z"
              description: "Pago mensual"
      responses:
        '201':
          description: Transacción creada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
              example:
                id: "txn-002"
                productId: "prod-123"
                type: "DEPOSIT"
                amount: 150.75
                date: "2025-08-14T12:00:00Z"
                description: "Pago mensual"

  /api/transactions/{id}:
    get:
      summary: Obtener transacción por ID
      operationId: getTransactionById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transacción encontrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
              example:
                id: "txn-001"
                productId: "prod-123"
                type: "DEPOSIT"
                amount: 100.0
                date: "2025-08-14T10:00:00Z"
                description: "Depósito inicial"
        '404':
          description: Transacción no encontrada

    put:
      summary: Actualizar transacción por ID
      operationId: updateTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              productId: "prod-123"
              type: "PAYMENT"
              amount: 200.0
              date: "2025-08-15T09:00:00Z"
              description: "Pago de servicio"
      responses:
        '200':
          description: Transacción actualizada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
              example:
                id: "txn-003"
                productId: "prod-123"
                type: "PAYMENT"
                amount: 200.0
                date: "2025-08-15T09:00:00Z"
                description: "Pago de servicio"
        '404':
          description: Transacción no encontrada

    delete:
      summary: Eliminar transacción por ID
      operationId: deleteTransaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Transacción eliminada
        '404':
          description: Transacción no encontrada

  /api/transactions/transfer:
    post:
      summary: Realizar transferencia entre cuentas
      operationId: transferBetweenAccounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        '201':
          description: Transferencia registrada
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'

  /api/transactions/commissions:
    get:
      summary: Obtener comisiones cobradas por producto en un periodo
      operationId: getCommissionsByProduct
      parameters:
        - name: startDate
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Lista de comisiones por producto
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommissionReport'

  /api/transactions/daily-balances:
    get:
      summary: Obtener saldos diarios por cliente en un mes
      operationId: getDailyBalances
      parameters:
        - name: customerId
          in: query
          required: true
          schema:
            type: string
        - name: month
          in: query
          required: true
          schema:
            type: string
            pattern: '^\d{4}-\d{2}$'
      responses:
        '200':
          description: Lista de saldos diarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyBalance'


components:
  schemas:
    TransactionRequest:
      type: object
      required:
        - productId
        - type
        - amount
        - date
      properties:
        productId:
          type: string
        customerId:
          type: string
        type:
          type: string
          enum: [ DEPOSIT, WITHDRAWAL, PAYMENT, CREDIT_CHARGE, TRANSFER_INTERNAL, TRANSFER_EXTERNAL ]
        amount:
          type: number
          format: decimal
          minimum: 0.01
        date:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        destinationAccountId:
          type: string
          nullable: true
        commissionApplied:
          type: number
          format: decimal
          nullable: true

    TransactionResponse:
      type: object
      properties:
        id:
          type: string
        productId:
          type: string
        customerId:
          type: string
        type:
          type: string
          enum: [ DEPOSIT, WITHDRAWAL, PAYMENT, CREDIT_CHARGE, TRANSFER_INTERNAL, TRANSFER_EXTERNAL ]
        amount:
          type: number
          format: decimal
        date:
          type: string
          format: date-time
        description:
          type: string
          nullable: true
        destinationAccountId:
          type: string
          nullable: true
        commissionApplied:
          type: number
          format: decimal
          nullable: true

    TransferRequest:
      type: object
      required:
        - sourceAccountId
        - destinationAccountId
        - amount
        - customerId
      properties:
        sourceAccountId:
          type: string
        destinationAccountId:
          type: string
        amount:
          type: number
          format: decimal
        customerId:
          type: string

    CommissionReport:
      type: object
      properties:
        productId:
          type: string
        productType:
          type: string
        totalCommission:
          type: number
          format: decimal

    DailyBalance:
      type: object
      properties:
        date:
          type: string
          format: date
        balance:
          type: number
          format: decimal
